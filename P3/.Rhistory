)
colnames(theData)
theData[1, 1]
theData[1, 2]
theData[1, 3]
checking = function(theData, idx){
print(any(is.na(theData[, idx])))
print(max(theData[, idx]))
print(min(theData[, idx]))
}
normalizeData = function(theData, idx, denumerator){
#replace NA elements with ZERO first
theData[is.na(theData[, idx]), idx] = 0
theData[, idx] = theData[, idx] / denumerator
theData
}
replaceNegativeWithZero = function(theData, idx){
#check if there is any NA
if(any(is.na(theData[, idx]))){
theData[is.na(theData[, idx]), idx] = 0.0
}
index = theData[, idx] < 0
theData[index, idx] = 0.0
theData
}
normalizeNegPosData = function(theData, idx){
#check if there is any NA
if(any(is.na(theData[, idx]))){
theData[is.na(theData[, idx]), idx] = 0.0
}
min = min(theData[, idx])
max = max(theData[, idx])
theData[, idx] = (theData[, idx] - min) / (max- min)
theData
}
replacePosWithCategoryNum = function(theData, idx, allPosition){
#check if there is any empty element, if so, replaced with "Sub"
if (any(is.na(theData[, idx]))){
theData[which(is.na(theData[, idx])), idx] = "Sub"
}
if (length(which(theData[, idx] == "") > 0)){
theData[which(theData[, idx] == ""), idx] = "Sub"
}
if (length(which(theData[, idx] == "0") > 0)){
theData[which(theData[, idx] == "0"), idx] = "Sub"
}
pos = allPosition
t = theData[, idx]
t1 = sapply(t, function(x){
x = as.character(x)
#print(x)
i = (which(pos == x) - 1) / (length(pos) - 1)
#if (x == "GK"){
#  print(i)
#}
})
theData[, idx] = t1
theData
}
replacePlayablePosWithCategoryNum = function(theData, idx, allPlayablePosition){
pos = allPlayablePosition
t = theData[, idx]
t1 = sapply(t, function(x){
x = as.character(x)
#print(x)
i = (which(pos == x) - 1) / (length(pos) - 1)
#if (x == "GK"){
#  print(i)
#}
})
theData[, idx] = t1
theData
}
f = "C:/Users/User/Desktop/d_whoscored/playerStats_analysis.csv"
theData <- read.csv(f,header=TRUE, sep=",", quote='"')
#get all playable position
l = c()
for(i in 1:18){
print (607+ (i-1)*columnSperatedSize)
l = append(l, levels(theData[, 607+ (i-1)*columnSperatedSize]))
print ("DONE!")
}
allPlayablePosition = unique(l)
#get all position
l = c()
for(i in 1:18){
print (508+ (i-1)*columnSperatedSize)
l = append(l, levels(theData[, 508+ (i-1)*columnSperatedSize]))
print ("DONE!")
print (603+ (i-1)*columnSperatedSize)
l = append(l, levels(theData[, 603+ (i-1)*columnSperatedSize]))
print ("DONE!")
}
allPosition = unique(l)
#move 0 and ""
allPosition = allPosition[-which(allPosition == "0")]
allPosition = allPosition[-which(allPosition == "")]
theData = normalizeData(theData, 3, 10.0)
theData = normalizeData(theData, 13, 100.0)
idx = c(3, 13)
columnSperatedSize = 359
for(i in 1:18){
#print (252  + (i-1)*columnSperatedSize)
#print (1)
theData = normalizeData(theData, 252 + (i-1)*columnSperatedSize,  10.0)
#print ("DONE!")
#print (285+ (i-1)*columnSperatedSize)
#print (2)
theData = replaceNegativeWithZero(theData, 285+ (i-1)*columnSperatedSize) #rating_defensive
theData = normalizeData(theData, 285+ (i-1)*columnSperatedSize, 10.0)
#print("DONE!")
#print (356+ (i-1)*columnSperatedSize)
#print (3)
theData = normalizeNegPosData(theData, 356+ (i-1)*columnSperatedSize) #rating_defensive_points
#print ("DONE!")
#print (413+ (i-1)*columnSperatedSize)
#print (4)
theData = normalizeData(theData, 413+ (i-1)*columnSperatedSize, 10.0)
#print ("DONE!")
#print (505+ (i-1)*columnSperatedSize)
#print (5)
theData = normalizeData(theData, 505+ (i-1)*columnSperatedSize, 10.0)
#print ("DONE!")
#print (508+ (i-1)*columnSperatedSize)
#print (6)
theData = replacePosWithCategoryNum(theData, 508+ (i-1)*columnSperatedSize, allPosition)
#print ("DONE!")
#print (536+ (i-1)*columnSperatedSize)
#print (7)
theData = normalizeNegPosData(theData, 536+ (i-1)*columnSperatedSize)
#print ("DONE!")
#print (574+ (i-1)*columnSperatedSize)
#print (8)
theData = normalizeNegPosData(theData, 574+ (i-1)*columnSperatedSize)
#print ("DONE!")
#print (603+ (i-1)*columnSperatedSize)
#print (9)
theData = replacePosWithCategoryNum(theData, 603+ (i-1)*columnSperatedSize, allPosition)
#print ("DONE!")
#print (607+ (i-1)*columnSperatedSize)
#print (10)
theData = replacePlayablePosWithCategoryNum(theData, 607+ (i-1)*columnSperatedSize, allPlayablePosition)
#print ("DONE!")
idx = append(idx, c(252 + (i-1)*columnSperatedSize, 285+ (i-1)*columnSperatedSize,
356+ (i-1)*columnSperatedSize , 413+ (i-1)*columnSperatedSize,
505+ (i-1)*columnSperatedSize, 508+ (i-1)*columnSperatedSize,
536+ (i-1)*columnSperatedSize, 574+ (i-1)*columnSperatedSize,
603+ (i-1)*columnSperatedSize, 607+ (i-1)*columnSperatedSize))
print (paste(i, " Player Done"))
}
idxNotProcessed = setdiff(c(1:6712), idx)
idxNotProcessed = idxNotProcessed[-c(1, 2)]
idxNotProcessed
for(i in idxNotProcessed){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
idxNotProcessed[1:6]
for(i in head(idxNotProcessed){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
for(i in head(idxNotProcessed){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
checking = function(theData, idx){
print(paste("Any NA? ", any(is.na(theData[, idx]))))
print(max(theData[, idx]))
print(min(theData[, idx]))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
checking = function(theData, idx){
print(paste("Any NA? ", any(is.na(theData[, idx]))))
print(paste("max value\t", max(theData[, idx])))
print(paste("min value\t", min(theData[, idx])))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
checking = function(theData, idx){
print(paste("Any NA? ", any(is.na(theData[, idx]))))
print(paste("max value", max(theData[, idx])))
print(paste("min value", min(theData[, idx])))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
checking = function(theData, idx){
print(paste("Any NA? ", any(is.na(theData[, idx]))))
print(paste("max value: ", max(theData[, idx])))
print(paste("min value: ", min(theData[, idx])))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
checking(theData, i)
}
#any(is.na(theData[, i]))
}
colname(theData[, i])
colnames(theData[, i])
colnames(theData)[i]
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
colnames(theData)[i]
checking(theData, i)
}
#any(is.na(theData[, i]))
}
for(i in head(idxNotProcessed)){
#for(i in 1:6712){
#if (!(i %in% idx) && class(theData[, i]) != "integer" && class(theData[, i]) != "double"){
# print(paste(i, " ", class(theData[, i])))
#}
if (any(theData[, i] > 1)){
print (paste("index: ", i))
print(colnames(theData)[i])
checking(theData, i)
}
#any(is.na(theData[, i]))
}
mean(theData[, 4])
(thData[, 4] - mean(theData[, 4]))
(tehData[, 4] - mean(theData[, 4]))
(theData[, 4] - mean(theData[, 4]))
(theData[, 4] - mean(theData[, 4])) / std(theData[, 4])
(theData[, 4] - mean(theData[, 4])) / sd(theData[, 4])
require(devtools)
install.packages('devtools')
require(devtools)
install_github('ramnathv/rCharts@dev')
install.packages("base64enc")
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 = nPlot(Freq ~ Hair, group='Eye', type='multiBarChart', data=subset(haireye, Sex=='Male'))
n1$save('fig/n1.html', cdn= TRUE)
cat()
n1$save('n1.html', cdn= TRUE)
cat('<iframe src='n1.html' width=100%, height=600></iframe>')
cat('<iframe src="n1.html" width=100%, height=600></iframe>')
wd()
getwd()
n1
n1$html
n1$html()
n1$
library(googleVis)
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
m = gvisMotionChart(Fruits, "Fruits", "Year", options=list(width=600, height=400))
print(m, "chart")
m = gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(m, "chart")
print(m, "chart")
m
print(m, "chart")
plot(m, "chart")
plot(n)
plot(m)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='tobylam', token='F1E18A5294A7C9FBEA933A0E6197DBB8', secret='0Ykfe5eSVXfXtyHUth9bEuviU3wNIHFuVKLFk0Fu')
library(datasets)
nhtemp
WWWusage
nottem
library(forecsat)
library(forecast)
seq(1:10)
ts = seq(1:10)
?ma
ma(ts)
ma(ts, 3)
ma(ts, 10)
ma(ts, 9)
ma(ts, 9, centre=TRUE)
ma(ts, 1, centre=TRUE)
ma(ts, 2, centre=TRUE)
ma(ts, 10, centre=TRUE)
rollmean
?filter
filter(sep(1:10), sides=1)
filter(seq(1:10), sides=1)
filter(seq(1:10))
?filter
filter(seq(1:10), sides=1)
?ma
y <- sin(x/20) + rnorm(300,sd=.1)
x <- 1:300
y <- sin(x/20) + rnorm(300,sd=.1)
ma(x)
ma(y, order=300)
ma(y, order=12)
y = y[1:10]
y
y <- sin(x/20) + rnorm(300,sd=.1)
y = y[1:10]
y
ma(y, order=10)
ma(y, order=9)
ma(y, order=9, centre=FALSE)
ma(y, order=9, centre=TRUE)
ma(y, order=10, centre=TRUE)
ma(y, order=11, centre=TRUE)
ma(y, order=9, centre=TRUE)
-2.5 - 3.5
(-2.5 - 3.5) / (0.5-0.5)
(-2.23 - -2.10) / (99.99--56.23)
(-2.23 - -2.10) / (99.99--56.23)
b = (-2.23 - -2.10) / (99.99--56.23)
b
b*-99.99
b*-99.99-2.23
?rbinom
?connections
install.packages("rWeka")
install.packages("RWeka")
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_11")
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jdk1.8.0_11")
library(rJava)
R.version()
\end{aligned}
print(meta(docs[[1]])) #en_US.blogs.txt
print(meta(docs[[1]])) #en_US.blogs.txt
source('~/.active-rstudio-document')
requests.get('https://rpubs.com', verify=False)
library("bitops", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
cd C:\[DATA]\Udacity
cd "C:\[DATA]\Udacity"
cd "C://[DATA]//Udacity"
load("C:/[DATA]/Udacity/Berkeley.csv")
read.csv("C:\[DATA]\Udacity\Berkeley.csv")
read.csv("C:/[DATA]/Udacity/Berkeley.csv")
df = read.csv("C:/[DATA]/Udacity/Berkeley.csv")
class (df)
u1 = 0.299
u2 = 0.307
n1 = 150
n2 = 165
var1 = 0.05
var2 = 0.08
(u1-u2) / sqrt(var1/n1 + var2/n2)
(var1/n1 + var2/n2)^2
((var1/n1 + var2/n2)^2)
((var1/n1 + var2/n2)^2) / (var1^2/(n1*n1*(n1-1)) + var2^2 /(n2*n2*(n2-1)))
library("RCurl", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
detach("package:bitops", unload=TRUE)
library("bitops", lib.loc="~/R/win-library/3.1")
library("bitops", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
exit()
exit
setwd("C:/Users/User/Documents/GitHub/DataLiterate/P3")
data = read.csv("./data/2008.csv.bz2", nrows=1000000)
#change all columns to lowercase
colnames(data) = tolower(colnames(data))
#find the IATA code that is in the origin column,
# but is NOT in Dest column
# Wrong question? should be
# in the dest column, but not in origin column
setdiff(levels(data$dest), levels(data$origin))
#Which airport, as defined by the IATA code,
# has at least 10,000 flights and had the lowest probability
# for a delayed flight in the data?
#prepare the new data frame with 4 columns only
df = data[, c("origin", "dest", "depdelay", "arrdelay")]
df$depdelay2 = NA
df$arrdelay2 = NA
df[which(df$depdelay>0), "depdelay2"] = 1
df[which(df$depdelay<=0), "depdelay2"] = 0
df[which(df$arrdelay>0), "arrdelay2"] = 1
df[which(df$arrdelay<=0), "arrdelay2"] = 0
#drop columns
df$depdelay = NULL
df$arrdelay = NULL
colnames(df) = c("origin", "dest", "depdeplay", "arrdelay")
getProbDelay = function(df, iataCode){
#filter the related iata data
temp = df[df$origin == iataCode | df$dest == iataCode, ]
#get the total number of flight
totalFlight = nrow(temp)
#get the total number of delay
totalDelay = sum(temp$depdeplay, na.rm = TRUE) + sum(temp$arrdelay, na.rm = TRUE)
probDelay = totalDelay / totalFlight
c(iataCode, totalFlight, probDelay)
}
#get all the iata code
iataCode = sort(intersect(levels(data$origin), levels(data$dest)))
#get the result list
resultList = unlist(lapply(iataCode, function (x){getProbDelay(df, x)}))
resultDf = data.frame(matrix(resultList, nrow=length(iataCode), byrow=TRUE))
colnames(resultDf) = c("iata", "numofflight", "probdelay")
resultDf$numofflight = as.numeric(as.character(resultDf$numofflight))
resultDf$probdelay = as.numeric(as.character(resultDf$probdelay))
#order by probdelay
resultDf = resultDf[order(resultDf$probdelay), ]
#get the iata code has at least 10,000 flights and had the lowest probability
resultDf[resultDf$numofflight > 10000, ][1,]
#
# create a new data frame
df = data[, c("dayofweek", "deptime", "uniquecarrier", "arrdelay", "depdelay")]
df$dayofweek2 = NA
df$deptime2 = NA
df[df$dayofweek <= 5, "dayofweek2"] = "Weekday"
df[df$dayofweek >= 6, "dayofweek2"] = "Weekend"
df[which(df$deptime >= 501 & df$deptime <= 1700), "deptime2"] = "Day Time"
df[which(df$deptime >= 1701 & df$deptime <= 2400), "deptime2"] = "Night Time"
df[which(df$deptime >= 0000 & df$deptime <= 500), "deptime2"] = "Red Eye"
df[which(df$arrdelay > 0 | df$depdelay >0), "delay"] = 1
df[which(df$arrdelay <= 0 & df$depdelay <= 0), "delay"] = 0
df$dayofweek = NULL
df$deptime = NULL
df$arrdelay = NULL
df$depdelay = NULL
colnames(df)[2] = "dayofweek"
colnames(df)[3] = "deptime"
#drop NA
df = df[-which(is.na(df$deptime)), ]
df = df[-which(is.na(df$delay)), ]
#t = melt(df)
#dcast(t, uniquecarrier + dayofweek+deptime ~ variable, fun.aggregate=length)
#dcast(t, uniquecarrier + dayofweek+deptime ~ variable, fun.aggregate=sum, na.rm=T)
library(plyr)
#ddply(temp, c("uniquecarrier", "dayofweek", "deptime"), summarise, totalFlight = sum(!is.na(uniquecarrier)), totalDelay = sum(delay), prob = sum(delay) / sum(!is.na(uniquecarrier)))
result = ddply(df, c("uniquecarrier", "dayofweek", "deptime"), summarise, probdelay = sum(delay) / sum(!is.na(uniquecarrier)))
write.csv(result, file="output_R.csv", row.names=F)
